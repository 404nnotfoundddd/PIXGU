// Generated by Xata Codegen 0.30.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "article",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: ["ID"],
    uniqueConstraints: {},
    columns: [
      {
        name: "ID",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "content",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "headerText",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "article_category",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: ["ID"],
    uniqueConstraints: {},
    columns: [
      {
        name: "ID",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "name",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "article_to_article_category",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {},
    columns: [
      {
        name: "articleId",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "categoryId",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "blocked_user",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: ["ID"],
    uniqueConstraints: {},
    columns: [
      {
        name: "ID",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "blocked_ID",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "blocked_by_ID",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "update_note",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: ["ID_&_Version"],
    uniqueConstraints: {},
    columns: [
      {
        name: "ID_&_Version",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "created_at",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "text",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
    ],
  },
  {
    name: "user",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: ["id"],
    uniqueConstraints: {
      user_discord_id_unique: {
        name: "user_discord_id_unique",
        columns: ["discord_id"],
      },
      user_github_id_unique: {
        name: "user_github_id_unique",
        columns: ["github_id"],
      },
      user_google_id_unique: {
        name: "user_google_id_unique",
        columns: ["google_id"],
      },
      user_username_ID_unique: {
        name: "user_username_ID_unique",
        columns: ["username_ID"],
      },
      user_username_with_username_ID_unique: {
        name: "user_username_with_username_ID_unique",
        columns: ["username_with_username_ID"],
      },
    },
    columns: [
      {
        name: "created_at",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "discord_id",
        type: "text",
        notNull: false,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "github_id",
        type: "int",
        notNull: false,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "google_id",
        type: "text",
        notNull: false,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "profile_picture",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "username",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "username_ID",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "username_with_username_ID",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "user_friendship",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: ["ID"],
    uniqueConstraints: {},
    columns: [
      {
        name: "ID",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "created_at",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "friend_ID",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "friend_username_with_username_ID",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "user_ID",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "user_session",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: ["id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "expires_at",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "user_id",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Article = InferredTypes["article"];
export type ArticleRecord = Article & XataRecord;

export type ArticleCategory = InferredTypes["article_category"];
export type ArticleCategoryRecord = ArticleCategory & XataRecord;

export type ArticleToArticleCategory =
  InferredTypes["article_to_article_category"];
export type ArticleToArticleCategoryRecord = ArticleToArticleCategory &
  XataRecord;

export type BlockedUser = InferredTypes["blocked_user"];
export type BlockedUserRecord = BlockedUser & XataRecord;

export type UpdateNote = InferredTypes["update_note"];
export type UpdateNoteRecord = UpdateNote & XataRecord;

export type User = InferredTypes["user"];
export type UserRecord = User & XataRecord;

export type UserFriendship = InferredTypes["user_friendship"];
export type UserFriendshipRecord = UserFriendship & XataRecord;

export type UserSession = InferredTypes["user_session"];
export type UserSessionRecord = UserSession & XataRecord;

export type DatabaseSchema = {
  article: ArticleRecord;
  article_category: ArticleCategoryRecord;
  article_to_article_category: ArticleToArticleCategoryRecord;
  blocked_user: BlockedUserRecord;
  update_note: UpdateNoteRecord;
  user: UserRecord;
  user_friendship: UserFriendshipRecord;
  user_session: UserSessionRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://404-s-workspace-68cmk0.eu-central-1.xata.sh/db/main-database:main",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
