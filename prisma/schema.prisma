// This is Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt                      DateTime                 @default(now())
  updatedAt                      DateTime                 @updatedAt
  gender                         String?
  isAdmin                        Boolean                  @default(false)
  isBanned                       Boolean                  @default(false)
  playingRoom                    Room?                    @relation(fields: [playingRoomId], references: [id])
  playingRoomId                  String?                  @unique
  writtenArticles                Article[]                @relation("WrittenArticles")
  editedArticles                 Article[]                @relation("EditedArticles")
  translatedArticles             Article[]                @relation("TranslatedArticles")
  UserStatistic                  UserStatistic[]
  writtenCutsceneTextInputGroups cutsceneTextInputGroup[]
  UserAchivement                 UserAchivement[]

  @@index([playingRoomId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserAchivement {
  id String @id @default(cuid())

  name         String
  requirements String  @db.VarChar(255)
  value        Boolean @default(false)
  user         User    @relation(fields: [userId], references: [id])
  userId       String

  @@index([userId])
}

model UserStatistic {
  id String @id @default(cuid())

  name   String
  value  String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
}

model Room {
  id String @id @default(cuid())

  name       String  @unique
  password   String?
  maxPlayers Int
  playingBy  User[]
}

model Article {
  id String @id @default(cuid())

  categories  ArticleCategory[]
  headerText  String
  content     String            @db.Text
  eriters     User[]            @relation("WrittenArticles")
  editors     User[]            @relation("EditedArticles")
  translaters User[]            @relation("TranslatedArticles")
}

model ArticleCategory {
  id String @id @default(cuid())

  name     String
  articles Article[]
}

model Cutscene {
  id             String          @id @default(cuid())
  // the name column shouldn't be translated when translating cutscene to other languages
  name           String
  language       String          @db.Char(2)
  cutsceneStages CutsceneStage[]
}

model CutsceneStage {
  id String @id @default(cuid())

  videoPath  String?   @db.VarChar(80)
  imagePath  String?   @db.VarChar(80)
  text       String?   @db.Text
  cutscene   Cutscene? @relation(fields: [cutsceneId], references: [id])
  cutsceneId String?

  @@index([cutsceneId])
}

model cutsceneTextInputGroup {
  id String @id @default(cuid())

  textInputs   cutsceneTextInput[]
  cutsceneName String
  User         User                @relation(fields: [userId], references: [id])
  userId       String

  @@index([userId])
}

model cutsceneTextInput {
  id String @id @default(cuid())

  name  String @db.VarChar(50)
  value String @db.VarChar(255)

  cutsceneTextInputGroup   cutsceneTextInputGroup @relation(fields: [cutsceneTextInputGroupId], references: [id])
  cutsceneTextInputGroupId String

  @@index([cutsceneTextInputGroupId])
}
